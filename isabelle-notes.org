#+TITLE:       isabelle-notes
#+DATE:        Monday,  8 August 2016
#+EMAIL:       serg.foo@gmail.com
#+DESCRIPTION:
#+KEYWORDS:
#+STARTUP:     content
#+STARTUP:     inlineimages

# Disable treating underscores as subscripts
#+OPTIONS: ^:nil

* Useful declarations
  - ~declare [[names_short]]~ - do not quantify ambiguous names when printing
  - ~using [[simp_trace_new mode=full]]~ - use within proofs to see what ~simp~ proof tactic did

* Data types

#+BEGIN_EXAMPLE
datatype 'a lst = Nil | Cons 'a "'a lst"
#+END_EXAMPLE

* Functions

  Individual equations can be named in order to invoke them within proofs later.

#+BEGIN_EXAMPLE
fun append :: "'a lst \<Rightarrow> 'a lst \<Rightarrow> 'a lst" where
  append_Nil:  "append Nil ys = ys"
| append_Cons: "append (Cons x xs) ys = Cons x (app xs ys)"
#+END_EXAMPLE

* Definitions
  Definitions are intended for abstract concepts. Define them like this

#+BEGIN_EXAMPLE
definition foo :: "int \<Rightarrow> int" where
"foo x = x + x"
#+END_EXAMPLE

  They can be expanded with

#+BEGIN_EXAMPLE
apply(simp add: definition_name_def)
#+END_EXAMPLE

  for some definition definition_name.

  Simplification can be temporarily undone by

#+BEGIN_EXAMPLE
apply(simp del: rule_name)
#+END_EXAMPLE

* Induction
  If function takes several arguments then induction rule is applied like this:

#+BEGIN_EXAMPLE
apply(induction x1, x2, ..., xN rule: f.induct)
#+END_EXAMPLE

* Expanding case expressions
  In order to expand case expressions, special rules must be used.

  | Purpose              | Rule type                                               |
  | For tuples           | apply(auto simp add: split_def)                         |
  | For let expressions  | apply(auto simp add: Let_def)                           |
  | For other data types | apply(auto split: <type name>.split), e.g. option.split |
  |                      |                                                         |

* Special symbols
  Composition - \circ
  Pretty tuples - \times

* Proof methods
** auto
** simp
** simp_all
** fastforce, force
   May be confused by complicated quantifiers.
** blast - good for logical formulas, esp. first-order ones, sets and relations
** sledgehammer
   Queries external SMT solver for a proof that can be checked by Isabelle.
   Isabelle does not just trust external tools.
** rule
   Substitute rule in the goal with rule's premises.

   apply(rule) - try to apply suitable logical rule to current goal, e.g.
   decompose conjunction into standalone goals

   apply(rule xyz) - apply rule xyz
